//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\C#\Postprocess.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: t
//              Version: NX 12
//              Date: 09-23-2018  (Format: mm-dd-yyyy)
//              Time: 13:55 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;
using NXOpen.UF;
using System.Collections;
using NXOpen.Utilities;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class Postprocess
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;

    NXOpen.UF.UFSession theUfSession = NXOpen.UF.UFSession.GetUFSession();
    NXOpen.Part workPart = Session.GetSession().Parts.Work;

    private string theDlxFileName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.Group group0;// Block type: Group
    private NXOpen.BlockStyler.ListBox list_postName;// Block type: List Box
    private NXOpen.BlockStyler.FileSelection nativeFileBrowser_post;// Block type: NativeFileBrowser
    private NXOpen.BlockStyler.Group group1;// Block type: Group
    private NXOpen.BlockStyler.StringBlock string_outfile;// Block type: String
    private NXOpen.BlockStyler.StringBlock string_lastName;// Block type: String
    private NXOpen.BlockStyler.FileSelection nativeFile_outfilepath;// Block type: NativeFileBrowser
    private NXOpen.BlockStyler.Group group;// Block type: Group
    private NXOpen.BlockStyler.StringBlock string_Unit;// Block type: String
    private NXOpen.BlockStyler.Toggle toggle_showIt;// Block type: Toggle
    private NXOpen.BlockStyler.StringBlock string_alarm;// Block type: String
    private NXOpen.BlockStyler.StringBlock string_check;// Block type: String

    //自定义数据
    public ArrayList listPostNames = new ArrayList();
    string post_machine_name;
    
    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public Postprocess()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDlxFileName = "Postprocess.dlx";
            theDialog = theUI.CreateDialog(theDlxFileName);
            theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw ex;
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. Journal Replay
    //
    //        1) Replay this file through Tool->Journal->Play Menu.
    //
    //    2. USER EXIT
    //
    //        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        2) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //------------------------------------------------------------------------------
    public static void Main()
    {
        Postprocess thePostprocess = null;
        try
        {
            thePostprocess = new Postprocess();
            // The following method shows the dialog immediately
            thePostprocess.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            if(thePostprocess != null)
                thePostprocess.Dispose();
                thePostprocess = null;
        }
    }
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
     public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
         return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static void UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if(theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }
    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            group0 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group0");
            list_postName = (NXOpen.BlockStyler.ListBox)theDialog.TopBlock.FindBlock("list_postName");
            nativeFileBrowser_post = (NXOpen.BlockStyler.FileSelection)theDialog.TopBlock.FindBlock("nativeFileBrowser_post");
            group1 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group1");
            string_outfile = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("string_outfile");
            string_lastName = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("string_lastName");
            nativeFile_outfilepath = (NXOpen.BlockStyler.FileSelection)theDialog.TopBlock.FindBlock("nativeFile_outfilepath");
            group = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group");
            string_Unit = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("string_Unit");
            toggle_showIt = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("toggle_showIt");
            string_alarm = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("string_alarm");
            string_check = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("string_check");
            //------------------------------------------------------------------------------
            //Registration of ListBox specific callbacks
            //------------------------------------------------------------------------------
            //list_postName.SetAddHandler(new NXOpen.BlockStyler.ListBox.AddCallback(AddCallback));
            
            //list_postName.SetDeleteHandler(new NXOpen.BlockStyler.ListBox.DeleteCallback(DeleteCallback));
            
            //------------------------------------------------------------------------------
            //------------------------------------------------------------------------------
            //Registration of StringBlock specific callbacks
            //------------------------------------------------------------------------------
            //string_outfile.SetKeystrokeCallback(new NXOpen.BlockStyler.StringBlock.KeystrokeCallback(KeystrokeCallback));
            
            //string_lastName.SetKeystrokeCallback(new NXOpen.BlockStyler.StringBlock.KeystrokeCallback(KeystrokeCallback));
            
            //string_Unit.SetKeystrokeCallback(new NXOpen.BlockStyler.StringBlock.KeystrokeCallback(KeystrokeCallback));
            
            //string_alarm.SetKeystrokeCallback(new NXOpen.BlockStyler.StringBlock.KeystrokeCallback(KeystrokeCallback));
            
            //string_check.SetKeystrokeCallback(new NXOpen.BlockStyler.StringBlock.KeystrokeCallback(KeystrokeCallback));
            
            //------------------------------------------------------------------------------
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        try
        {
            //---- Enter your callback code here -----

            //遍历所有目前有的后处理器，并添加到列表框中
            //测试后置处理器名称
            int postCount;
            string[] postNames;
            theUfSession.Cam.OptAskPostNames(out postCount, out postNames);

            //theUfSession.Ui.DisplayMessage(listPostNames.Count.ToString(), 1);
            //foreach (string str in listPostNames)
            //{
            //    theUfSession.Ui.DisplayMessage(str, 1);
            //}

            
            //加入判断
            //添加到列表框中
            for (int i = 0; i < postCount; i++)
            {
                listPostNames.Add(postNames[i]);
            }
            string[] temparray = (string[])listPostNames.ToArray(typeof(string));
            list_postName.SetListItems(temparray);

            list_postName.SingleSelect = true;

            //theUfSession.Ui.DisplayMessage(listPostNames.Count.ToString(), 1);





        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Information, "请切换到加工模块使用此功能");
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public int apply_cb()
    {
        int errorCode = 0;
        try
        {
            //---- Enter your callback code here -----

            //输出后处理
            //将选中的节点的数量及tag返回
            int selectNodeCount;
            Tag[] selTags;
            theUfSession.UiOnt.AskSelectedNodes(out selectNodeCount, out selTags);
            string[] postlistName = new string[selectNodeCount];

            NXOpen.CAM.CAMObject[] camObjects = new NXOpen.CAM.CAMObject[selectNodeCount];

            //取得当前工作部件的目录，并将其设置在输出目录里
            string wholepath = workPart.FullPath;
            string part_name = workPart.Name;
            int indexofName = wholepath.LastIndexOf(part_name);
            string workpath = wholepath.Substring(0, indexofName);
            //string tempworkpath = "E:\\Work\\2018-9-19-1823-228-3";
            theUfSession.Ui.DisplayMessage(workpath, 1);

            string_outfile.Value = workpath;
            //theUfSession.Ui.DisplayMessage(list_postName.SelectedItemString, 1);
            
                                                   

            //返回选中的后处理器的名称

            int[] ind = list_postName.GetSelectedItemBooleans();
            string[] temppostname = list_postName.GetSelectedItemStrings();
            theUfSession.Ui.DisplayMessage("选中的列的文本： " + temppostname[0], 1);
            string[] instr = list_postName.GetListItems();
            theUfSession.Ui.DisplayMessage("当前选中序号： " + ind.Length, 1);
            //theUfSession.Ui.DisplayMessage("当前选中序号文本： " + instr[11], 1);
            string[] all_postmachin_name = list_postName.GetListItems();
            post_machine_name = temppostname[0];
            //theUfSession.Ui.DisplayMessage("当前选中序号： " + ind, 1);
            theUfSession.Ui.DisplayMessage(post_machine_name, 1);
            string teststring = post_machine_name; //"MILL_3_AXIS";


            //开始设置循环，进行多个程序文件的后处理
            for (int i = 0; i < selectNodeCount; i++)
            {
                camObjects[i] = (NXOpen.CAM.CAMObject)NXObjectManager.Get(selTags[i]);
                postlistName[i] = camObjects[i].Name + "." + string_lastName.Value;
                //theUfSession.Ui.DisplayMessage("选中的后处理器名称" + post_machine_name, 1);
                NXOpen.CAM.CAMObject[] tempObj = new NXOpen.CAM.CAMObject[1];
                tempObj[0] = camObjects[i];
                nativeFile_outfilepath.Path = string_outfile.Value + "\\" + camObjects[i].Name;
                string ttt = string_outfile.Value + camObjects[i].Name;
                //theUfSession.Ui.DisplayMessage("输出文件路径： " + nativeFile_outfilepath.Path, 1);
                //workPart.CAMSetup.OutputClsf(tempObj, enum_clsf.ValueAsString, nativeFolderBrowser_Path.Path + camObjects[i].Name, NXOpen.CAM.CAMSetup.OutputUnits.Metric);
                workPart.CAMSetup.PostprocessWithSetting(tempObj, teststring, string_outfile.Value + "\\"+ postlistName[i], NXOpen.CAM.CAMSetup.OutputUnits.Metric, NXOpen.CAM.CAMSetup.PostprocessSettingsOutputWarning.PostDefined, NXOpen.CAM.CAMSetup.PostprocessSettingsReviewTool.PostDefined);
            }


        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if(block == list_postName)
            {
            //---------Enter your code here-----------
            }
            else if(block == nativeFileBrowser_post)
            {
                //---------Enter your code here-----------

                string using_path = nativeFileBrowser_post.Path; //输出整个选择的绝对路径
                string[] post_all = using_path.Split('\\');  //通过‘\’将绝对路径进行分割
                int co = post_all.Length;  //  取得分割后字符串数组的个数
                string post_usr_all = post_all[co - 1]; //去最后一个字符数组中的字符
                string[] post_usr_all_cut = post_usr_all.Split('.'); //用'.'进行最后文件名的分割
                string post_usr_name = post_usr_all_cut[0];  //去'.'分割的第一部分，即为我们要用的文件名

                string[] add_post_name = new string[1];
                add_post_name[0] = post_usr_name;
                list_postName.SetListItems(add_post_name);
                listPostNames.Add(post_usr_name);
                string[] temparray = (string[])listPostNames.ToArray(typeof(string));
                list_postName.SetListItems(temparray);

                


                //theUfSession.Ui.DisplayMessage(post_usr_name, 1);

            }
            else if(block == string_outfile)
            {
            //---------Enter your code here-----------
            }
            else if(block == string_lastName)
            {
            //---------Enter your code here-----------
            }
            else if(block == nativeFile_outfilepath)
            {
            //---------Enter your code here-----------
            }
            else if(block == string_Unit)
            {
            //---------Enter your code here-----------
            }
            else if(block == toggle_showIt)
            {
            //---------Enter your code here-----------
            }
            else if(block == string_alarm)
            {
            //---------Enter your code here-----------
            }
            else if(block == string_check)
            {
            //---------Enter your code here-----------
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    //------------------------------------------------------------------------------
    //ListBox specific callbacks
    //------------------------------------------------------------------------------
    //public int  AddCallback (NXOpen.BlockStyler.ListBox list_box)
    //{
    //}
    
    //public int  DeleteCallback(NXOpen.BlockStyler.ListBox list_box)
    //{
    //}
    
    //------------------------------------------------------------------------------
    //------------------------------------------------------------------------------
    //StringBlock specific callbacks
    //------------------------------------------------------------------------------
    //public int KeystrokeCallback(NXOpen.BlockStyler.StringBlock string_block, string uncommitted_value)
    //{
    //}
    
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //Returns the propertylist of the specified BlockID
    //------------------------------------------------------------------------------
    public PropertyList GetBlockProperties(string blockID)
    {
        PropertyList plist =null;
        try
        {
            plist = theDialog.GetBlockProperties(blockID);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return plist;
    }
    
}
